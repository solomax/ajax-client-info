package org.ajax;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.wicket.Application;
import org.apache.wicket.Component;
import org.apache.wicket.MarkupContainer;
import org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.form.AjaxFormSubmitBehavior;
import org.apache.wicket.core.util.string.JavaScriptUtils;
import org.apache.wicket.markup.IMarkupResourceStreamProvider;
import org.apache.wicket.markup.head.HeaderItem;
import org.apache.wicket.markup.head.IHeaderResponse;
import org.apache.wicket.markup.head.JavaScriptHeaderItem;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.protocol.http.BufferedWebResponse;
import org.apache.wicket.protocol.http.WebSession;
import org.apache.wicket.protocol.http.request.WebClientInfo;
import org.apache.wicket.request.Response;
import org.apache.wicket.request.cycle.RequestCycle;
import org.apache.wicket.request.resource.JavaScriptResourceReference;
import org.apache.wicket.request.resource.ResourceReference;
import org.apache.wicket.resource.TextTemplateResourceReference;
import org.apache.wicket.util.resource.IResourceStream;
import org.apache.wicket.util.resource.StringResourceStream;

public class ClientInfoBehavior extends AbstractDefaultAjaxBehavior {
	private static final long serialVersionUID = 1L;
	private final BrowserInfoForm form = new BrowserInfoForm(DummyPage.COMP_ID);
	private final AjaxFormSubmitBehavior formSubmit;
	
	public ClientInfoBehavior() {
		form.add(formSubmit = new AjaxFormSubmitBehavior(form.getForm(), "submit") {
			private static final long serialVersionUID = 1L;

			@Override
			protected void onAfterSubmit(AjaxRequestTarget target) {
				//target.appendJavaScript("alert('aaa');");
				//WebSession session = WebSession.get();
				//WebClientInfo clientInfo = session.getClientInfo();
				//target.appendJavaScript("alert('" + clientInfo.getProperties().getHostname() + "');");
				onClientInfo(target);
			}
		});
	}
	
	private IModel<Map<String, Object>> newResourceModel() {
		RequestCycle requestCycle = RequestCycle.get();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("ajaxClientInfoPanel", renderPanel(form, requestCycle));
		params.put("ajaxClientInfoFormId", form.getMarkupId());
		params.put("ajaxClientInfoFormUrl", formSubmit.getCallbackUrl());
		return Model.ofMap(params);
	}

	private ResourceReference newResourceReference() {
		return new TextTemplateResourceReference(ClientInfoBehavior.class, "client-info.js", this.newResourceModel()) {
			private static final long serialVersionUID = 1L;

			@Override
			public Iterable<? extends HeaderItem> getDependencies() {
				List<HeaderItem> dependencies = new ArrayList<HeaderItem>();
				dependencies.add(JavaScriptHeaderItem.forReference(Application.get().getJavaScriptLibrarySettings()
						.getJQueryReference()));
				return dependencies;
			}
		};
	}

	@Override
	public void renderHead(Component component, IHeaderResponse response) {
		super.renderHead(component, response);
		response.render(JavaScriptHeaderItem.forReference(this.newResourceReference(), "ajax-client-info"));
		response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(ClientInfoBehavior.class, "submit-client-info.js")));
	}

	@Override
	protected void respond(AjaxRequestTarget arg0) {
	}
	
	protected void onClientInfo(AjaxRequestTarget arg0) {
		//client handler
	}

	/**
	 * Collects the html generated by the rendering of a page.
	 * 
	 * @param panel
	 *            the panel that should be rendered.
	 * @return the html rendered by the panel
	 */
	private String renderPanel(final Panel panel, RequestCycle requestCycle) {
		final Response oldResponse = requestCycle.getResponse();
		BufferedWebResponse tempResponse = new BufferedWebResponse(null);

		try {
			requestCycle.setResponse(tempResponse);

			DummyPage page = new DummyPage();
			page.add(panel);

			panel.render();
		} finally {
			requestCycle.setResponse(oldResponse);
		}

		String result = JavaScriptUtils.escapeQuotes(tempResponse.getText()).toString();
		return result.replaceAll("\n", "").replaceAll("\r", "");
	}

	/**
	 * A page used as a parent for the panel based templating.
	 */
	private static class DummyPage extends WebPage implements IMarkupResourceStreamProvider {
		private static final long serialVersionUID = 1L;

		private static final String COMP_ID = "dummy";

		public IResourceStream getMarkupResourceStream(MarkupContainer container, Class<?> containerClass) {
			return new StringResourceStream("<wicket:container wicket:id='" + COMP_ID + "'></wicket:container>");
		}

	}
}
